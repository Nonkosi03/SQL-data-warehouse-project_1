/*
==========================================================
Stored Procedure: Load Silver Layer (Bronze --> Silver
==========================================================
Script Purpose:
    This Stored Procedure Transforms and loads data into the 'Silver' schema from external the Bronze layer.
    It performs the following actions: 
      -Removes duplicates
      -Data Type Casting
      -Handling Missing Data
      -Handling Invalid values
      -Handling Unwanted Spaces
      -Derive Columns
      -Data Normalization & Standardization
      -Data Enrichment
      -It uses the 'INSET INTO' command to load the data from Bronze layer to the silver (layer) tables.

Parameters:
  None.
This stored procedure does not accept any parameters or return any values.
==========================================================
*/

-----CLEANING THE DATA AND LOADING IT INTO THE SILVER LAYER
CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
	DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;
	BEGIN TRY
		SET @batch_start_time = GETDATE();
		PRINT '=============================================';
		PRINT 'Loading Silver Layer';
		PRINT '=============================================';

		PRINT '---------------------------------------------';
		PRINT 'Loading CRM Tables';
		PRINT '---------------------------------------------';

		-- INSTERTING FOR TABLE: silver.crm_cust_info
		SET @start_time = GETDATE();
		PRINT 'Truncating Table: silver.crm_cust_info'
		TRUNCATE TABLE silver.crm_cust_info;
		PRINT '>>CLEAN AND INSERT DATA INTO SILVER>crm_cust_info'
		INSERT INTO silver.crm_cust_info (
		cst_id, 
		cst_key,
		cst_firstname,
		cst_lastname, 
		cst_material_status,
		cst_gndr,
		cst_create_date
		)
		SELECT 
		cst_id, 
		cst_key, 
		TRIM(cst_firstname) AS cst_firstname, ---Removed unnecessary spaces to ensure data consistency, and uniformity across all records
		TRIM(cst_lastname) AS cst_lastname, ------Removed unnecessary spaces to ensure data consistency, and uniformity across all records
		CASE WHEN UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
			WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
			ELSE 'N/A'
		END cst_material_status,  ---Normalize marital status values to readable format (DATA NORMALIZATION & STANDARDIZATION-- Maps coded values to meaningful, user-friendly descriptions)
		CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
			WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
			ELSE 'N/A'   ---Handling missing data (Fills in the blank by adding a default value)
		END cst_gndr, ---Normalize gender values to readable format
		cst_create_date
		FROM(
		SELECT *, 
		ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last  ---Removed the duplicates
		FROM bronze.crm_cust_info
		WHERE cst_id IS NOT NULL
		)t WHERE flag_last = 1; --- Select the most recent record per customer
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + 'seconds';
		PRINT '----------';

		-- INSTERTING FOR TABLE: silver.crm_prd_info
		SET @start_time = GETDATE();
		PRINT 'Truncating Table: silver.crm_prd_info'
		TRUNCATE TABLE silver.crm_prd_info;
		PRINT '>>CLEAN AND INSERT DATA INTO SILVER>>crm_prd_info'
		INSERT INTO silver.crm_prd_info(
		prd_id,
		cat_id,
		prd_key,
		prd_nm,
		prd_cost,
		prd_line,
		prd_start_dt,
		prd_end_dt
		)
		SELECT
		prd_id,
		REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id,   ---Extract Category ID (DERIVED COLUMN)
		SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,          ---Extract Product Key (DERIVED COLUMN)
		prd_nm, 
		ISNULL(prd_cost, 0) AS prd_cost,                         ---Handling missing values(NULL) and replacing them with zero
		CASE WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
			 WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'other Sales'
			 WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
			 WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
			 ELSE 'N/A'                         
		END prd_line,                                            ---Map product line codes to descriptive values
		CAST (prd_start_dt AS DATE) AS prd_start_dt,             ---Redefining the column (Converting a data type to another)
		CAST (LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt  ---Calculate end date as one day before the next start date (Data Enrichment)
		FROM bronze.crm_prd_info;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + 'seconds';
		PRINT '----------';

		-- INSTERTING FOR TABLE: silver.crm_sales_details
		SET @start_time = GETDATE();
		PRINT 'Truncating Table: silver.crm_sales_details'
		TRUNCATE TABLE silver.crm_sales_details;
		PRINT '>>CLEAN AND INSERT DATA INTO SILVER>>crm_sales_details'
		INSERT INTO silver.crm_sales_details(
		sls_ord_num,
		sls_prd_key, 
		sls_cust_id, 
		sls_order_dt,
		sls_ship_dt, 
		sls_due_dt,
		sls_sales,
		sls_quantity,
		sls_price
		)
		SELECT 
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL       ---Handling Invalid Data
			 ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)                ---Changing to more correct data type
		END sls_order_dt,
		CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
			 ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
		END sls_ship_dt,
		CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
			 ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
		END sls_due_dt,
		CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)    ---Handling missing and invalid data by deriving already existing one
				THEN sls_quantity * ABS(sls_price)
			 ELSE sls_sales
		END AS sls_sales,                                                   ---Recalculate sales if original value is missing or incorrect                                               
		sls_quantity,
		CASE WHEN sls_price IS NULL OR sls_price <= 0                       ---Handling missing and invalid data by deriving already existing one
				THEN sls_sales / NULLIF(sls_quantity, 0)
			 ELSE sls_price                                                 ---Derive price if original value is invalid
		END sls_price
		FROM bronze.crm_sales_details;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + 'seconds';
		PRINT '----------';

		PRINT '---------------------------------------------';
		PRINT 'Loading ERP Tables';
		PRINT '---------------------------------------------';

		-- INSTERTING FOR TABLE: silver.erp_cust_az12
		SET @start_time = GETDATE();
		PRINT 'Truncating Table: silver.erp_cust_az12'
		TRUNCATE TABLE silver.erp_cust_az12;
		PRINT '>>CLEAN AND INSERT DATA INTO SILVER>>erp_cust_az12'
		INSERT INTO silver.erp_cust_az12(
		cid,
		bdate,
		gen
		)
		SELECT 
		CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))          --- Remove 'NAS' prefix if present
			 ELSE cid
		END cid,
		CASE WHEN bdate > GETDATE() THEN NULL
			 ELSE bdate
		END AS bdate,                                                       --- Set future birthdates to null 
		CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
			 WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
			 ELSE 'N/A'
		END gen                                                             --- Normalize gender values and handle unkown cases
		FROM bronze.erp_cust_az12;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + 'seconds';
		PRINT '----------';

		-- INSTERTING FOR TABLE: silver.erp_loc_a101
		SET @start_time = GETDATE();
		PRINT 'Truncating Table: silver.erp_loc_a101'
		TRUNCATE TABLE silver.erp_loc_a101;
		PRINT '>>CLEAN AND INSERT DATA INTO SILVER>>erp_loc_a101'
		INSERT INTO silver.erp_loc_a101(
		cid,
		cntry)
		SELECT 
		REPLACE (cid, '-', '') cid,
		CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
			 WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
			 WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'N/A'
			 ELSE TRIM(cntry)
		END AS cntry                                                        --- Normalize and Handle missing or Blank country codes
		FROM bronze.erp_loc_a101;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + 'seconds';
		PRINT '----------';

		-- INSTERTING FOR TABLE: silver.erp_px_cat_g1v2
		SET @start_time = GETDATE();
		PRINT 'Truncating Table: silver.erp_px_cat_g1v2'
		TRUNCATE TABLE silver.erp_px_cat_g1v2;
		PRINT '>>CLEAN AND INSERT DATA INTO SILVER>>erp_px_cat_g1v2'
		INSERT INTO silver.erp_px_cat_g1v2(
		id,
		cat,
		subcat,
		maintenance
		)
		SELECT 
		id,
		cat,
		subcat,
		maintenance
		FROM bronze.erp_px_cat_g1v2;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + 'seconds';
		PRINT '----------';

		SET @batch_end_time =GETDATE();
		PRINT '====================================';
		PRINT 'Loading Silver Layer is Completed';
		PRINT '	  - Total Load Duration: ' + CAST(DATEDIFF(second, @batch_start_time, @batch_end_time) AS NVARCHAR) + 'seconds';
		PRINT '====================================';
 	END TRY
	BEGIN CATCH
		PRINT '=============================================';
		PRINT 'ERROR OCCURED DURING LOADING OF BRONZE LAYER';
		PRINT 'Error Message' + ERROR_MESSAGE();
		PRINT 'Error Message' + CAST (ERROR_NUMBER() AS NVARCHAR);
		PRINT 'Error Message' + CAST (ERROR_STATE() AS NVARCHAR);
		PRINT '=============================================';
	END CATCH
END;

EXEC silver.load_silver;
